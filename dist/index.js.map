{"version":3,"sources":["../src/index.ts","../src/wallet.ts"],"sourcesContent":["import { Provider, Contract, Account, constants } from 'starknet';\nimport walllet from './wallet';\nimport Web3 from 'web3';\n\nconst provider = new Provider({ nodeUrl: constants.NetworkName.SN_GOERLI });\n\nasync function ethTest() {\n    const ethAdddress = '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7';\n    const { abi: ethAbi } = await provider.getClassAt(ethAdddress);\n    if (ethAbi === undefined) {\n        throw new Error('no abi.');\n    }\n    const ethContract = new Contract(ethAbi, ethAdddress, provider);\n\n    const name = await ethContract.name()\n    console.log('name:',Web3.utils.toAscii(name.toString(16)));\n\n    const decimals = await ethContract.decimals();\n    console.log('decimals:',decimals)\n\n    let account = walllet.account\n    const balance = await ethContract.balance_of(account);\n    console.log('balance:',balance)\n\n}\nasync function ethBridgeTest() {\n    const ethBridgeAdddress = '0x073314940630fd6dcda0d772d4c972c4e0a9946bef9dabf4ef84eda8ef542b82';\n    const { abi: ethBridgeAbi } = await provider.getClassAt(ethBridgeAdddress);\n    if (ethBridgeAbi === undefined) {\n        throw new Error('no abi.');\n    }\n    const ethBridgeContract = new Contract(ethBridgeAbi, ethBridgeAdddress, provider);\n\n    const privateKey0 = walllet.privateKey;\n    const account0Address = walllet.account;\n    const account0 = new Account(provider, account0Address, privateKey0);\n\n    ethBridgeContract.connect(account0);\n\n    //  initiate_withdraw(l1_recipient,amount)\n    let l1_recipient = '0x7b597a25563155bFE3447Ba74b7F99B91cEf284D'\n    let amount = '10000000000000000' // 0.01\n    const myCall = ethBridgeContract.populate('initiate_withdraw', [l1_recipient, amount]);\n    const res = await ethBridgeContract.initiate_withdraw(myCall.calldata);\n    // https://testnet.starkscan.co/tx/0x3530cc470e3d3df1f2a9718be1345688649b3fcd69490ee4d77c61a8e1c4ea5\n    // res.transaction_hash: 0x3530cc470e3d3df1f2a9718be1345688649b3fcd69490ee4d77c61a8e1c4ea5\n    console.log('res.transaction_hash:',res.transaction_hash)\n\n    //等待交易完成\n    // await provider.waitForTransaction(res.transaction_hash)\n\n\n}\n\nasync function main() {\n    // await ethTest()\n    await ethBridgeTest() \n}\n\nmain()","const walllet = {\n    privateKey:'0x05af2d83bb7f69a436b89a0134d56969a50f65b5cf785b3d50caa5f5cbd559a7',\n    account:'0x06757EF15b5F149b5C804A13CB2da360DcFa6e91F95E7eAf37Bb0d27a1Ed4156',\n    toEthAddress:'0x7b597a25563155bFE3447Ba74b7F99B91cEf284D',\n}\nexport default walllet;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,sBAAuD;;;ACAvD,IAAM,UAAU;AAAA,EACZ,YAAW;AAAA,EACX,SAAQ;AAAA,EACR,cAAa;AACjB;AACA,IAAO,iBAAQ;;;ADHf,kBAAiB;AAEjB,IAAM,WAAW,IAAI,yBAAS,EAAE,SAAS,0BAAU,YAAY,UAAU,CAAC;AAqB1E,eAAe,gBAAgB;AAC3B,QAAM,oBAAoB;AAC1B,QAAM,EAAE,KAAK,aAAa,IAAI,MAAM,SAAS,WAAW,iBAAiB;AACzE,MAAI,iBAAiB,QAAW;AAC5B,UAAM,IAAI,MAAM,SAAS;AAAA,EAC7B;AACA,QAAM,oBAAoB,IAAI,yBAAS,cAAc,mBAAmB,QAAQ;AAEhF,QAAM,cAAc,eAAQ;AAC5B,QAAM,kBAAkB,eAAQ;AAChC,QAAM,WAAW,IAAI,wBAAQ,UAAU,iBAAiB,WAAW;AAEnE,oBAAkB,QAAQ,QAAQ;AAGlC,MAAI,eAAe;AACnB,MAAI,SAAS;AACb,QAAM,SAAS,kBAAkB,SAAS,qBAAqB,CAAC,cAAc,MAAM,CAAC;AACrF,QAAM,MAAM,MAAM,kBAAkB,kBAAkB,OAAO,QAAQ;AAGrE,UAAQ,IAAI,yBAAwB,IAAI,gBAAgB;AAM5D;AAEA,eAAe,OAAO;AAElB,QAAM,cAAc;AACxB;AAEA,KAAK;","names":[]}